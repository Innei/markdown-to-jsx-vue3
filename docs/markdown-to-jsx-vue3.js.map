{"version":3,"file":"markdown-to-jsx-vue3.js","sources":["../node_modules/unquote/index.js","../index.tsx","../site.tsx"],"sourcesContent":["var reg = /[\\'\\\"]/\n\nmodule.exports = function unquote(str) {\n  if (!str) {\n    return ''\n  }\n  if (reg.test(str.charAt(0))) {\n    str = str.substr(1)\n  }\n  if (reg.test(str.charAt(str.length - 1))) {\n    str = str.substr(0, str.length - 1)\n  }\n  return str\n}\n","/* @jsx h */\n/**\n * markdown-to-jsx@6 is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. üôèüèº\n */\nimport {\n  h as VueH,\n  defineComponent,\n  PropType,\n  VNode,\n  RenderFunction,\n  DefineComponent,\n  Component,\n} from 'vue'\n/// <reference path=\"unquote.d.ts\" />\nimport unquote from 'unquote'\n\n/**\n * RequireAtLeastOne<{ ... }> <- only requires at least one key\n */\ntype RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n  T,\n  Exclude<keyof T, Keys>\n> &\n  {\n    [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n  }[Keys]\n\nexport type CreateElement = typeof VueH\n\nexport type HTMLTags = keyof JSX.IntrinsicElements\n\nexport type State = {\n  inAnchor?: boolean\n  inline?: boolean\n  inTable?: boolean\n  key?: string | number\n  list?: boolean\n  simple?: boolean\n}\n\nexport type ParserResult = {\n  [key: string]: any\n  type?: string\n}\n\nexport type NestedParser = (input: string, state?: State) => ParserResult\n\nexport type Parser<ParserOutput> = (\n  capture: RegExpMatchArray,\n  nestedParse: NestedParser,\n  state?: State\n) => ParserOutput\n\nexport type RuleOutput = (ast: ParserResult, state: State) => JSX.Element\n\nexport type Rule<ParserOutput = ParserResult> = {\n  match: (\n    source: string,\n    state: State,\n    prevCapturedString?: string\n  ) => RegExpMatchArray | null\n  order: Priority\n  parse: Parser<ParserOutput>\n  react?: (\n    node: ParserOutput,\n    output: RuleOutput,\n    state?: State\n  ) => ReturnType<RenderFunction>\n}\n\nexport type RuleName =\n  | 'blockQuote'\n  | 'breakLine'\n  | 'breakThematic'\n  | 'codeBlock'\n  | 'codeFenced'\n  | 'codeInline'\n  | 'footnote'\n  | 'footnoteReference'\n  | 'gfmTask'\n  | 'heading'\n  | 'headingSetext'\n  | 'htmlComment'\n  | 'image'\n  | 'link'\n  | 'linkAngleBraceStyleDetector'\n  | 'linkBareUrlDetector'\n  | 'linkMailtoDetector'\n  | 'list'\n  | 'newlineCoalescer'\n  | 'paragraph'\n  | 'ref'\n  | 'refImage'\n  | 'refLink'\n  | 'table'\n  | 'tableSeparator'\n  | 'text'\n  | 'textBolded'\n  | 'textEmphasized'\n  | 'textEscaped'\n  | 'textStrikethroughed'\n  | 'htmlBlock'\n  | 'htmlSelfClosing'\nexport type Rules = {\n  blockQuote: Rule\n  breakLine: Rule\n  breakThematic: Rule\n  codeBlock: Rule\n  codeFenced: Rule\n  codeInline: Rule\n  footnote: Rule\n  footnoteReference: Rule\n  gfmTask: Rule\n  heading: Rule\n  headingSetext: Rule\n  htmlComment: Rule\n  image: Rule\n  link: Rule\n  linkAngleBraceStyleDetector: Rule\n  linkBareUrlDetector: Rule\n  linkMailtoDetector: Rule\n  list: Rule\n  newlineCoalescer: Rule\n  paragraph: Rule\n  ref: Rule\n  refImage: Rule\n  refLink: Rule\n  table: Rule\n  tableSeparator: Rule\n  text: Rule\n  textBolded: Rule\n  textEmphasized: Rule\n  textEscaped: Rule\n  textStrikethroughed: Rule\n  htmlBlock: Rule\n  htmlSelfClosing: Rule\n  [key: string]: Rule\n}\n\nexport type Override =\n  | RequireAtLeastOne<{\n      component: Component\n      props: Object\n    }>\n  | Component\n\nexport type Overrides = {\n  [tag in HTMLTags]?: Override\n} & {\n  [customComponent: string]: Override\n}\nexport type ExtendsRules = Partial<{\n  [key in RuleName]: Partial<Rule>\n}>\n\nexport type Options = Partial<{\n  /**\n   * Ultimate control over the output of all rendered JSX.\n   */\n  createElement: (\n    tag: Parameters<CreateElement>[0],\n    props: any,\n    ...children: VNode[]\n  ) => JSX.Element\n\n  /**\n   * Disable the compiler's best-effort transcription of provided raw HTML\n   * into JSX-equivalent. This is the functionality that prevents the need to\n   * use `dangerouslySetInnerHTML` in React.\n   */\n  disableParsingRawHTML: boolean\n\n  /**\n   * Forces the compiler to always output content with a block-level wrapper\n   * (`<p>` or any block-level syntax your markdown already contains.)\n   */\n  forceBlock: boolean\n\n  /**\n   * Forces the compiler to always output content with an inline wrapper (`<span>`)\n   */\n  forceInline: boolean\n\n  /**\n   * Supply additional HTML entity: unicode replacement mappings.\n   *\n   * Pass only the inner part of the entity as the key,\n   * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n   *\n   * By default\n   * the following entites are replaced with their unicode equivalents:\n   *\n   * ```\n   * &amp;\n   * &apos;\n   * &gt;\n   * &lt;\n   * &nbsp;\n   * &quot;\n   * ```\n   */\n  namedCodesToUnicode: {\n    [key: string]: string\n  }\n\n  /**\n   * Selectively control the output of particular HTML tags as they would be\n   * emitted by the compiler.\n   */\n  overrides: Overrides\n\n  /**\n   * Declare the type of the wrapper to be used when there are multiple\n   * children to render. Set to `null` to get an array of children back\n   * without any wrapper, or use `React.Fragment` to get a React element\n   * that won't show up in the DOM.\n   */\n  wrapper: VNode | null\n\n  /**\n   * Forces the compiler to wrap results, even if there is only a single\n   * child or no children.\n   */\n  forceWrapper: boolean\n\n  /**\n   * Override normalization of non-URI-safe characters for use in generating\n   * HTML IDs for anchor linking purposes.\n   */\n  slugify: (source: string) => string\n\n  /**\n   * Add additional rules for parsing the markdown\n   */\n  additionalParserRules: {\n    [key: string]: Rule\n  }\n\n  extendsRules: ExtendsRules\n  /** @default [] */\n\n  disabledTypes: RuleName[]\n\n  allowedTypes: RuleName[]\n  /**\n   * @default ['script', 'style']\n   */\n  doNotProcessHtmlElements: HTMLTags[]\n}>\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = {\n  accesskey: 'accessKey',\n  allowfullscreen: 'allowFullScreen',\n  allowtransparency: 'allowTransparency',\n  autocomplete: 'autoComplete',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  charset: 'charSet',\n  class: 'className',\n  classid: 'classId',\n  colspan: 'colSpan',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  crossorigin: 'crossOrigin',\n  enctype: 'encType',\n  for: 'htmlFor',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formmethod: 'formMethod',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  hreflang: 'hrefLang',\n  inputmode: 'inputMode',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  marginheight: 'marginHeight',\n  marginwidth: 'marginWidth',\n  maxlength: 'maxLength',\n  mediagroup: 'mediaGroup',\n  minlength: 'minLength',\n  novalidate: 'noValidate',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  rowspan: 'rowSpan',\n  spellcheck: 'spellCheck',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  tabindex: 'tabIndex',\n  usemap: 'useMap',\n} as const\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ‚Ü≥ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ‚Üì                ‚Ü≥ disabled: true\n *                     ‚Ü≥ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ‚Ü≥ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\nconst TEXT_BOLD_R =\n  /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R =\n  /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\nconst TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R = /(^\\n+|\\n+$|\\s+$)/g\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)'\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +'\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX)\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n)\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_COMMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n  PARAGRAPH_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[√Ä√Å√Ç√É√Ñ√Ö√†√°√¢√£√§√•√¶√Ü]/g, 'a')\n    .replace(/[√ß√á]/g, 'c')\n    .replace(/[√∞√ê]/g, 'd')\n    .replace(/[√à√â√ä√ã√©√®√™√´]/g, 'e')\n    .replace(/[√è√Ø√é√Æ√ç√≠√å√¨]/g, 'i')\n    .replace(/[√ë√±]/g, 'n')\n    .replace(/[√∏√ò≈ì≈í√ï√µ√î√¥√ì√≥√í√≤]/g, 'o')\n    .replace(/[√ú√º√õ√ª√ö√∫√ô√π]/g, 'u')\n    .replace(/[≈∏√ø√ù√Ω]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(source: string, parse: NestedParser, state: State) {\n  const prevInTable = state.inTable\n  state.inTable = true\n  const tableRow = parse(source.trim(), state)\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(source: string, parse: NestedParser, state: State) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: NestedParser,\n  state: State\n) {\n  state.inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state.inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: keyof HTMLElement | keyof HTMLAnchorElement,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: Rules\n): (source: string, state: State) => ReturnType<NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(source: string, state: State): ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule.match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nexport function inlineRegex(regex: RegExp) {\n  return function match(source, state: State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nexport function simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nexport function blockRegex(regex: RegExp) {\n  return function match(source: string, state: State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nexport function anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: ParserResult | ParserResult[],\n    state: State = {}\n  ): VNode[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nexport function sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\nconst cloneElement = (VNode, props = {}) => {\n  const attrs = { ...VNode.data?.attrs, ...props }\n  const data = { ...VNode.data, attrs }\n\n  return { ...VNode, data }\n}\n\n/**\n * Everything inline, including links.\n */\nexport function parseInline(\n  parse: NestedParser,\n  content: string,\n  state: State\n): ParserResult {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(content, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nexport function parseSimpleInline(\n  parse: NestedParser,\n  content: string,\n  state: State\n): ParserResult {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(content, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nexport function parseBlock(parse, content, state: State): ParserResult {\n  state.inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nexport const parseCaptureInline: Parser<ReturnType<typeof parseInline>> = (\n  capture,\n  parse,\n  state: State\n) => {\n  return {\n    content: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: Rules) {\n  return function nestedRuleOutput(\n    ast: ParserResult,\n    outputFunc: RuleOutput,\n    state: State\n  ) {\n    return rules[ast.type].react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport enum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(markdown: string, options: Options = {}) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n  options.additionalParserRules = options.additionalParserRules || ({} as any)\n\n  const createElementFn = options.createElement || VueH\n\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: HTMLTags,\n    props: Parameters<CreateElement>[1] & {\n      className?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag as string, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        class:\n          cx(\n            props?.className,\n            props?.class,\n            overrideProps?.class,\n            overrideProps.className\n          ) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let _inline = false\n\n    if (options.forceInline) {\n      _inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      _inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        _inline\n          ? input\n          : `${input.replace(TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R, '')}\\n\\n`,\n        { inline: _inline }\n      )\n    )\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (_inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return h(wrapper as any, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string) {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n\n    return attributes\n      ? attributes.reduce(function (map, raw, index) {\n          const delimiterIdx = raw.indexOf('=')\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n            const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n            const normalizedValue = (map[mappedKey] =\n              attributeValueToJSXPropValue(key, value))\n\n            if (\n              typeof normalizedValue === 'string' &&\n              (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n                HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n            ) {\n              map[mappedKey] = cloneElement(compile(normalizedValue.trim()), {\n                key: index,\n              })\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n          }\n\n          return map\n        }, {})\n      : undefined\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n  type FootNote = { footnote: string; identifier: string }\n  const footnotes: FootNote[] = []\n  const footnoteMap = new Map<string, FootNote>()\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: Partial<Rules> = {\n    blockQuote: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      react(node, output, state) {\n        return (\n          <blockquote key={state.key}>{output(node.content, state)}</blockquote>\n        )\n      },\n    } as Rule<{ content: ParserResult }>,\n\n    breakLine: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    breakThematic: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    codeBlock: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          lang: undefined,\n        }\n      },\n\n      react(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code class={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        )\n      },\n    } as Rule<{ content: string; lang?: string }>,\n\n    codeFenced: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return <code key={state.key}>{node.content}</code>\n      },\n    } as Rule<{ content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        const obj = {\n          footnote: capture[2],\n          identifier: capture[1],\n        }\n        footnotes.push(obj)\n        footnoteMap.set(obj.identifier, obj)\n\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    footnoteReference: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n          footnoteMap,\n        }\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)}>\n            <sup key={state.key}>{node.content}</sup>\n          </a>\n        )\n      },\n    } as Rule<{ content: string; target: string }>,\n\n    gfmTask: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readonly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as Rule<{ completed: boolean }>,\n\n    heading: {\n      match: blockRegex(HEADING_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        }\n      },\n      react(node, output, state) {\n        node.tag = `h${node.level}` as HTMLTags\n        return (\n          // @ts-ignore\n          <node.tag id={node.id} key={state.key}>\n            {output(node.content, state)}\n          </node.tag>\n        )\n      },\n    } as Rule<{\n      content: ParserResult\n      id: string\n      level: number\n      tag: HTMLTags\n    }>,\n\n    headingSetext: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    image: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as Rule<{ alt?: string; target: string; title?: string }>,\n\n    link: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)} title={node.title}>\n            {output(node.content, state)}\n          </a>\n        )\n      },\n    } as Rule<{\n      content: ParserResult\n      target: string\n      title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      match: (source, state) => {\n        if (state.inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    list: {\n      match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n        const isListBlock = state.list || !state.inline\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source\n\n          return LIST_R.exec(source)\n        } else {\n          return null\n        }\n      },\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const bullet = capture[2]\n        const ordered = bullet.length > 1\n        const start = ordered ? +bullet : undefined\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R)\n\n        let lastItemWasAParagraph = false\n        const itemContent = items.map(function (item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '')\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1\n          const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph)\n          lastItemWasAParagraph = thisItemIsAParagraph\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state._inline depending\n          // on our list's looseness.\n          const oldStateInline = state.inline\n          const oldStateList = state.list\n          state.list = true\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent\n          if (thisItemIsAParagraph) {\n            state.inline = false\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n          } else {\n            state.inline = true\n            adjustedContent = content.replace(LIST_ITEM_END_R, '')\n          }\n\n          const result = parse(adjustedContent, state)\n\n          // Restore our state before returning\n          state.inline = oldStateInline\n          state.list = oldStateList\n\n          return result\n        })\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        }\n      },\n      react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul'\n\n        return (\n          <Tag key={state.key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>\n            })}\n          </Tag>\n        )\n      },\n    } as Rule<{\n      items: ParserResult[]\n      ordered: boolean\n      start?: number\n    }>,\n\n    newlineCoalescer: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      match: blockRegex(PARAGRAPH_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <p key={state.key}>{output(node.content, state)}</p>\n      },\n    } as Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    refImage: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        )\n      },\n    } as Rule<{ alt?: string; ref: string }>,\n\n    refLink: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{output(node.fallbackContent, state)}</span>\n        )\n      },\n    } as Rule<{\n      content: ParserResult\n      fallbackContent: ParserResult\n      ref: string\n    }>,\n\n    table: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      react(node, output, state) {\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      match: function (source, state) {\n        if (!state.inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      order: Priority.HIGH,\n      parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      react(node /*, output, state*/) {\n        return node.content\n      },\n    } as Rule<{ content: string }>,\n\n    textBolded: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      react(node, output, state) {\n        return <strong key={state.key}>{output(node.content, state)}</strong>\n      },\n    } as Rule<ReturnType<NestedParser>>,\n\n    textEmphasized: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      react(node, output, state) {\n        return <em key={state.key}>{output(node.content, state)}</em>\n      },\n    } as Rule<ReturnType<NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textStrikethroughed: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <del key={state.key}>{output(node.content, state)}</del>\n      },\n    } as Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ...options.additionalParserRules,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key]._match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key]._parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.allowedTypes?.length) {\n    Object.keys(rules).forEach(key => {\n      if (!options.allowedTypes.includes(key as any)) {\n        delete rules[key]\n      }\n    })\n  } else if (options.disabledTypes?.length) {\n    options.disabledTypes.forEach(type => {\n      delete rules[type]\n    })\n  }\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as HTMLTags\n        const noInnerParse =\n          (\n            options.doNotProcessHtmlElements ?? DO_NOT_PROCESS_HTML_ELEMENTS\n          ).indexOf(tagName) !== -1\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        const content = noInnerParse\n          ? capture[3]\n          : parseFunc(parse, trimmed, state)\n\n        state.inAnchor = false\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          content,\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node.tag key={state.key} {...node.attrs}>\n            {node.noInnerParse\n              ? (node.content as string)\n              : output(node.content as ParserResult, state)}\n          </node.tag>\n        )\n      },\n    } as Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      content: string | ReturnType<NestedParser>\n      noInnerParse: Boolean\n      tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        }\n      },\n      react(node, output, state) {\n        return h(node.tag, { ...node.attrs, key: state.key })\n      },\n    } as Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      tag: string\n    }>\n  }\n\n  // merge extends rule\n\n  const extendsRules = options.extendsRules\n  if (extendsRules) {\n    for (const key in extendsRules) {\n      const originRule = rules[key]\n      if (!originRule) {\n        continue\n      }\n\n      Object.assign(rules[key], {\n        ...extendsRules[key],\n      })\n    }\n  }\n\n  const parser = parserFor(rules as Rules)\n  const emitter: Function = reactFor(ruleOutput(rules as Rules))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    const Footer = (\n      <footer key=\"footer\">\n        {footnotes.map(function createFootnote(def) {\n          return (\n            <div id={options.slugify(def.identifier)} key={def.identifier}>\n              {def.identifier}\n              {emitter(parser(def.footnote, { inline: true }))}\n            </div>\n          )\n        })}\n      </footer>\n    )\n    if (Array.isArray(jsx)) {\n      jsx.push(Footer)\n    } else jsx.props.children.push(Footer)\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\n\nconst Markdown = defineComponent({\n  props: {\n    options: {\n      type: Object as PropType<Options>,\n    },\n    props: {\n      type: Object as PropType<Record<string, any>>,\n    },\n  },\n  setup(props, { slots }) {\n    return () =>\n      cloneElement(\n        compiler(\n          slots.default?.()[0].children as any as string,\n          props.options || {}\n        ),\n        props.props || {}\n      )\n  },\n})\n\nexport default Markdown\n","// /* @jsx h */\n\nimport { createApp, defineComponent, h } from 'vue'\n\nimport { parseCaptureInline, Priority, simpleInlineRegex, Rule } from './index'\n\nimport Markdown, { Options } from './index'\n\nconst MyComponent = defineComponent({\n  props: {},\n  setup() {\n    return () => h('h3', '---------MyComponent-------')\n  },\n})\n\n//  ==Mark==\nconst MarkRule: Rule = {\n  match: simpleInlineRegex(/^==((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)==/),\n  order: Priority.LOW,\n  parse: parseCaptureInline,\n  react(node, output, state?) {\n    return h(\n      'mark',\n      {\n        class: 'rounded-md bg-always-yellow-400 bg-opacity-80 px-1 text-black',\n      },\n      output(node.content, state!)\n    )\n  },\n}\n\nconst options: Options = {\n  overrides: {\n    MyComponent: {\n      component: MyComponent,\n    },\n  },\n  additionalParserRules: {\n    mark: MarkRule,\n  },\n}\n\nconst content = document.getElementById('sample-content')!.textContent!.trim()\n\n// @ts-ignore\ncreateApp(h(Markdown, { options }, content)).mount('#root')\n\n///\n"],"names":["reg","unquote","str","test","charAt","substr","length","ATTRIBUTE_TO_JSX_PROP_MAP","accesskey","allowfullscreen","allowtransparency","autocomplete","autofocus","autoplay","cellpadding","cellspacing","charset","classid","colspan","contenteditable","contextmenu","crossorigin","enctype","formaction","formenctype","formmethod","formnovalidate","formtarget","frameborder","hreflang","inputmode","keyparams","keytype","marginheight","marginwidth","maxlength","mediagroup","minlength","novalidate","radiogroup","readonly","rowspan","spellcheck","srcdoc","srclang","srcset","tabindex","usemap","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","GFM_TASK_R","HEADING_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","PARAGRAPH_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","TEXT_BOLD_R","TEXT_EMPHASIZED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_BULLET","LIST_ITEM_PREFIX","LIST_ITEM_PREFIX_R","RegExp","LIST_ITEM_R","LIST_R","LINK_INSIDE","LINK_HREF_AND_TITLE","LINK_R","IMAGE_R","BLOCK_SYNTAXES","containsBlockSyntax","input","some","r","slugify","replace","toLowerCase","parseTableAlignCapture","alignCapture","parseTableRow","source","parse","state","prevInTable","inTable","tableRow","trim","cells","forEach","node","i","type","push","content","parseTableAlign","alignText","split","map","parseTableCells","rowsText","rowText","parseTable","capture","inline","header","align","getTableStyle","colIndex","textAlign","normalizeAttributeKey","key","hyphenIndex","indexOf","match","_","letter","toUpperCase","attributeValueToJSXPropValue","value","reduce","styles","kvPair","slice","camelCasedKey","sanitizeUrl","normalizeWhitespace","parserFor","rules","ruleList","Object","keys","order","isFinite","console","warn","sort","typeA","typeB","orderA","orderB","nestedParse","result","prevCapture","ruleType","rule","currCaptureString","substring","parsed","outerParse","inlineRegex","regex","exec","simpleInlineRegex","simple","blockRegex","anyScopeRegex","reactFor","outputFunc","nestedReactOutput","ast","Array","isArray","oldKey","lastWasString","nodeOut","isString","url","decoded","decodeURIComponent","e","unescapeUrl","rawUrlString","cloneElement","VNode","props","_VNode$data","attrs","_extends","data","parseInline","isCurrentlyInline","isCurrentlySimple","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","ruleOutput","nestedRuleOutput","react","cx","call","arguments","filter","Boolean","join","get","src","path","fb","ptr","frags","undefined","shift","getTag","tag","overrides","override","Priority","compiler","markdown","options","_options$allowedTypes","_options$disabledType","additionalParserRules","createElementFn","createElement","VueH","h","overrideProps","apply","className","concat","compile","_inline","forceInline","forceBlock","arr","emitter","parser","wrapper","jsx","forceWrapper","attrStringToMap","attributes","raw","index","delimiterIdx","mappedKey","normalizedValue","Error","prototype","toString","footnotes","footnoteMap","Map","refs","blockQuote","HIGH","output","breakLine","__","breakThematic","codeBlock","MAX","lang","codeFenced","codeInline","LOW","footnote","obj","identifier","set","footnoteReference","target","href","gfmTask","completed","checked","heading","id","level","headingSetext","htmlComment","image","alt","title","link","linkAngleBraceStyleDetector","linkBareUrlDetector","inAnchor","linkMailtoDetector","address","list","isStartOfLine","isListBlock","bullet","ordered","start","items","lastItemWasAParagraph","itemContent","item","space","spaceRegex","isLastItem","containsBlocks","thisItemIsAParagraph","oldStateInline","oldStateList","adjustedContent","Tag","generateListItem","newlineCoalescer","paragraph","ref","refImage","refLink","fallbackContent","table","generateHeaderCell","style","generateTableRow","row","generateTableCell","c","tableSeparator","text","MIN","full","inner","textBolded","MED","textEmphasized","textEscaped","textStrikethroughed","allowedTypes","includes","disabledTypes","disableParsingRawHTML","htmlBlock","_options$doNotProcess","_capture$3$match","whitespace","trimmer","trimmed","parseFunc","tagName","noInnerParse","doNotProcessHtmlElements","htmlSelfClosing","extendsRules","originRule","assign","Footer","createFootnote","def","children","Markdown","defineComponent","setup","_ref","slots","MyComponent","MarkRule","component","mark","document","getElementById","textContent","createApp","mount"],"mappings":"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"}